{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Grafana backend exposes an HTTP API, the same API is used by the frontend to do\neverything from saving dashboards, creating users and updating data sources.",
    "title": "Grafana HTTP API.",
    "contact": {
      "name": "Grafana Labs",
      "url": "https://grafana.com",
      "email": "hello@grafana.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.0.1"
  },
  "host": "localhost:10081",
  "basePath": "/api",
  "paths": {
    "/auth/keys": {
      "get": {
        "description": "Will return auth keys.",
        "tags": [
          "apikeys"
        ],
        "summary": "Get auth keys.",
        "operationId": "getAPIkeys",
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "x-go-name": "IncludeExpired",
            "description": "Show expired keys",
            "name": "includeExpired",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getAPIkeyResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Will return details of the created API key",
        "tags": [
          "apikeys"
        ],
        "summary": "Creates an API key.",
        "operationId": "addAPIkey",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddApiKeyCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postAPIkeyResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/quotaReachedError"
          },
          "409": {
            "$ref": "#/responses/dublicateAPIkeyError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/auth/keys/{id}": {
      "delete": {
        "tags": [
          "apikeys"
        ],
        "summary": "Delete API key.",
        "operationId": "deleteAPIkey",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/calculate-diff": {
      "post": {
        "produces": [
          "application/json",
          "text/html"
        ],
        "tags": [
          "dashboards"
        ],
        "summary": "Perform diff on two dashboards.",
        "operationId": "calcDashboardDiff",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "base": {
                  "$ref": "#/definitions/CalculateDiffTarget"
                },
                "diffType": {
                  "description": "The type of diff to return\nDescription:\n`basic`\n`json`",
                  "type": "string",
                  "enum": [
                    "basic",
                    "json"
                  ],
                  "x-go-name": "DiffType"
                },
                "new": {
                  "$ref": "#/definitions/CalculateDiffTarget"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardDiffResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/db": {
      "post": {
        "description": "Creates a new dashboard or updates an existing dashboard.",
        "tags": [
          "dashboards"
        ],
        "summary": "Create / Update dashboard",
        "operationId": "postDashboard",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postDashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "412": {
            "$ref": "#/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/home": {
      "get": {
        "tags": [
          "dashboards"
        ],
        "summary": "Get home dashboard.",
        "operationId": "getHomeDashboard",
        "responses": {
          "200": {
            "$ref": "#/responses/getHomeDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/id/{DashboardID}/permissions": {
      "get": {
        "tags": [
          "dashboard_permissions"
        ],
        "summary": "Gets all existing permissions for the given dashboard.",
        "operationId": "getDashboardPermissions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDashboardPermissionsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "This operation will remove existing permissions if they’re not included in the request.",
        "tags": [
          "dashboard_permissions"
        ],
        "summary": "Updates permissions for a dashboard.",
        "operationId": "postDashboardPermissions",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDashboardAclCommand"
            }
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/id/{DashboardID}/restore": {
      "post": {
        "tags": [
          "dashboard_versions"
        ],
        "summary": "Restore a dashboard to a given dashboard version.",
        "operationId": "restoreDashboardVersion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/quotaReachedError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/id/{DashboardID}/versions": {
      "get": {
        "tags": [
          "dashboard_versions"
        ],
        "summary": "Gets all existing versions for the dashboard.",
        "operationId": "getDashboardVersions",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "x-go-name": "Limit",
            "description": "Maximum number of results to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 0,
            "x-go-name": "Start",
            "description": "Version to start from when returning queries",
            "name": "start",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardVersionsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/id/{DashboardID}/versions/{DashboardVersionID}": {
      "get": {
        "tags": [
          "dashboard_versions"
        ],
        "summary": "Get a specific dashboard version.",
        "operationId": "getDashboardVersion",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardID",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "DashboardVersionID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardVersionResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/import": {
      "post": {
        "tags": [
          "dashboards"
        ],
        "summary": "Import dashboard.",
        "operationId": "importDashboard",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ImportDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/importDashboardResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "412": {
            "$ref": "#/responses/preconditionFailedError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/tags": {
      "get": {
        "tags": [
          "dashboards"
        ],
        "summary": "Get all dashboards tags of an organisation.",
        "operationId": "getDashboardTags",
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardsTagsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/trim": {
      "post": {
        "tags": [
          "dashboards"
        ],
        "summary": "Trim defaults from dashboard.",
        "operationId": "trimDashboard",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TrimDashboardCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/trimDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/dashboards/uid/{uid}": {
      "get": {
        "description": "Will return the dashboard given the dashboard unique identifier (uid).",
        "tags": [
          "dashboards"
        ],
        "summary": "Get dashboard by uid.",
        "operationId": "getDashboardByUID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UID",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/dashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Will delete the dashboard given the specified unique identifier (uid).",
        "tags": [
          "dashboards"
        ],
        "summary": "Delete dashboard by uid.",
        "operationId": "deleteDashboardByUID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "UID",
            "name": "uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteDashboardResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scope: `datasources:*`.",
        "tags": [
          "datasources"
        ],
        "summary": "Get all data sources.",
        "operationId": "getDatasources",
        "responses": {
          "200": {
            "$ref": "#/responses/getDatasourcesResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "By defining `password` and `basicAuthPassword` under secureJsonData property\nGrafana encrypts them securely as an encrypted blob in the database.\nThe response then lists the encrypted fields under secureJsonFields.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:create`",
        "tags": [
          "datasources"
        ],
        "summary": "Create a data source.",
        "operationId": "addDatasource",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AddDataSourceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createOrUpdateDatasourceResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/quotaReachedError"
          },
          "409": {
            "$ref": "#/responses/conflictError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/id/{datasource_name}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Get data source Id by Name.",
        "operationId": "getDatasourceIdByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceName",
            "name": "datasource_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDatasourceIDresponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/name/{datasource_name}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Get a single data source by Name.",
        "operationId": "getDatasourceByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceName",
            "name": "datasource_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDatasourceResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:name:*` and `datasources:name:test_datasource` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Delete an existing data source by name.",
        "operationId": "deleteDatasourceByName",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceName",
            "name": "datasource_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteDatasourceByNameResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/proxy/{datasource_id}/{datasource_proxy_route}": {
      "get": {
        "description": "Proxies all calls to the actual data source.",
        "tags": [
          "datasources"
        ],
        "summary": "Data source proxy GET calls.",
        "operationId": "datasourceProxyGETcalls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DatasourceProxyRoute",
            "name": "datasource_proxy_route",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "description": "Proxies all calls to the actual data source. The data source should support POST methods for the specific path and role as defined",
        "tags": [
          "datasources"
        ],
        "summary": "Data source proxy POST calls.",
        "operationId": "datasourceProxyPOSTcalls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DatasourceProxyRoute",
            "name": "datasource_proxy_route",
            "in": "path",
            "required": true
          },
          {
            "name": "DatasourceProxyParam",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          },
          "202": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Proxies all calls to the actual data source.",
        "tags": [
          "datasources"
        ],
        "summary": "Data source proxy DELETE calls.",
        "operationId": "datasourceProxyDELETEcalls",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "DatasourceProxyRoute",
            "name": "datasource_proxy_route",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/uid/{datasource_uid}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Get a single data source by UID.",
        "operationId": "getDatasourceByUID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceUID",
            "name": "datasource_uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDatasourceResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:uid:*` and `datasources:uid:kLtEtcRGk` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Delete an existing data source by UID.",
        "operationId": "deleteDatasourceByUID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceUID",
            "name": "datasource_uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/datasources/{datasource_id}": {
      "get": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:read` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Get a single data source by Id.",
        "operationId": "getDatasourceByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDatasourceResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "description": "Similar to creating a data source, `password` and `basicAuthPassword` should be defined under\nsecureJsonData in order to be stored securely as an encrypted blob in the database. Then, the\nencrypted fields are listed under secureJsonFields section in the response.\n\nIf you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:write` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Update an existing data source.",
        "operationId": "updateDatasource",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdateDataSourceCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createOrUpdateDatasourceResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled\nyou need to have a permission with action: `datasources:delete` and scopes: `datasources:*`, `datasources:id:*` and `datasources:id:1` (single data source).",
        "tags": [
          "datasources"
        ],
        "summary": "Delete an existing data source by id.",
        "operationId": "deleteDatasourceByID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "DatasourceID",
            "name": "datasource_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/folders": {
      "get": {
        "description": "Returns all folders that the authenticated user has permission to view.",
        "tags": [
          "folders"
        ],
        "summary": "Get all folders.",
        "operationId": "getFolders",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 1000,
            "x-go-name": "Limit",
            "description": "Limit the maximum number of folders to return",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "x-go-name": "Page",
            "description": "Page index for starting fetching folders",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getFoldersResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "folders"
        ],
        "summary": "Create folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "x-go-name": "Body",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFolderCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/folderResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "409": {
            "$ref": "#/responses/conflictError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/folders/id/{folder_id}": {
      "get": {
        "description": "Returns the folder identified by id.",
        "tags": [
          "folders"
        ],
        "summary": "Get folder by id.",
        "operationId": "getFolderByID",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "FolderID",
            "name": "folder_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/folderResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/folders/{folder_uid}": {
      "get": {
        "tags": [
          "folders"
        ],
        "summary": "Get folder by uid.",
        "operationId": "getFolderByUID",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FolderUID",
            "name": "folder_uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "folders"
        ],
        "summary": "Update folder.",
        "operationId": "updateFolder",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FolderUID",
            "name": "folder_uid",
            "in": "path",
            "required": true
          },
          {
            "x-go-name": "Body",
            "description": "To change the unique identifier (uid), provide another one.\nTo overwrite an existing folder with newer version, set `overwrite` to `true`.\nProvide the current version to safelly update the folder: if the provided version differs from the stored one the request will fail, unless `overwrite` is `true`.",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateFolderCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/folderResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "409": {
            "$ref": "#/responses/conflictError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "delete": {
        "description": "Deletes an existing folder identified by UID along with all dashboards (and their alerts) stored in the folder. This operation cannot be reverted.",
        "tags": [
          "folders"
        ],
        "summary": "Delete folder.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FolderUID",
            "name": "folder_uid",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "x-go-name": "ForceDeleteRules",
            "description": "If `true` any Grafana 8 Alerts under this folder will be deleted.\nSet to `false` so that the request will fail if the folder contains any Grafana 8 Alerts.",
            "name": "forceDeleteRules",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteFolderResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/folders/{folder_uid}/permissions": {
      "get": {
        "tags": [
          "folder_permissions"
        ],
        "summary": "Gets all existing permissions for the folder with the given `uid`.",
        "operationId": "getFolderPermissions",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "FolderUID",
            "name": "folder_uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getDashboardPermissionsResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "folder_permissions"
        ],
        "summary": "Updates permissions for a folder. This operation will remove existing permissions if they’re not included in the request.",
        "operationId": "updateFolderPermissions",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDashboardAclCommand"
            }
          },
          {
            "type": "string",
            "x-go-name": "FolderUID",
            "name": "folder_uid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/okResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "search"
        ],
        "operationId": "search",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Query",
            "description": "Search Query",
            "name": "query",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Tag",
            "description": "List of tags to search for",
            "name": "tag",
            "in": "query"
          },
          {
            "enum": [
              "dash-folder",
              "dash-db"
            ],
            "type": "string",
            "x-go-name": "Type",
            "description": "Type to search for, dash-folder or dash-db",
            "name": "type",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "DashboardIds",
            "description": "List of dashboard id’s to search for",
            "name": "dashboardIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "x-go-name": "FolderIds",
            "description": "List of folder id’s to search in for dashboards",
            "name": "folderIds",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Starred",
            "description": "Flag indicating if only starred Dashboards should be returned",
            "name": "starred",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Limit",
            "description": "Limit the number of returned results (max 5000)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Page",
            "description": "Use this parameter to access hits beyond limit. Numbering starts at 1. limit param acts as page size. Only available in Grafana v6.2+.",
            "name": "page",
            "in": "query"
          },
          {
            "enum": [
              "Edit",
              "View"
            ],
            "type": "string",
            "default": "View",
            "x-go-name": "Permission",
            "description": "Set to `Edit` to return dashboards/folders that the user can edit",
            "name": "permission",
            "in": "query"
          },
          {
            "enum": [
              "alpha-asc",
              "alpha-desc"
            ],
            "type": "string",
            "default": "alpha-asc",
            "x-go-name": "Sort",
            "description": "Sort method; for listing all the possible sort methods use the search sorting endpoint.",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/searchResponse"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "422": {
            "$ref": "#/responses/unprocessableEntityError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    },
    "/search/sorting": {
      "get": {
        "description": "List search sorting options",
        "tags": [
          "search"
        ],
        "operationId": "searchSorting",
        "responses": {
          "200": {
            "$ref": "#/responses/searchSortingResponse"
          }
        }
      }
    },
    "/tsdb/query": {
      "post": {
        "description": "Queries a data source having backend implementation.\n\nMost of Grafana’s builtin data sources have backend implementation.",
        "tags": [
          "datasources"
        ],
        "summary": "Query metrics.",
        "operationId": "queryDatasource",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MetricRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/queryDatasourceResponse"
          },
          "400": {
            "$ref": "#/responses/badRequestError"
          },
          "401": {
            "$ref": "#/responses/unauthorisedError"
          },
          "403": {
            "$ref": "#/responses/forbiddenError"
          },
          "404": {
            "$ref": "#/responses/notFoundError"
          },
          "500": {
            "$ref": "#/responses/internalServerError"
          }
        }
      }
    }
  },
  "definitions": {
    "AddApiKeyCommand": {
      "description": "COMMANDS",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/RoleType"
        },
        "secondsToLive": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SecondsToLive"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "AddDataSourceCommand": {
      "description": "Also acts as api DTO",
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/DataSource"
        },
        "access": {
          "$ref": "#/definitions/DsAccess"
        },
        "basicAuth": {
          "type": "boolean",
          "x-go-name": "BasicAuth"
        },
        "basicAuthPassword": {
          "type": "string",
          "x-go-name": "BasicAuthPassword"
        },
        "basicAuthUser": {
          "type": "string",
          "x-go-name": "BasicAuthUser"
        },
        "database": {
          "type": "string",
          "x-go-name": "Database"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "jsonData": {
          "$ref": "#/definitions/Json"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "secureJsonData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SecureJsonData"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "withCredentials": {
          "type": "boolean",
          "x-go-name": "WithCredentials"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "ApiKeyDTO": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expiration"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "role": {
          "$ref": "#/definitions/RoleType"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "CalculateDiffTarget": {
      "type": "object",
      "properties": {
        "dashboardId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DashboardId"
        },
        "unsavedDashboard": {
          "$ref": "#/definitions/Json"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "CreateFolderCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/Folder"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "Dashboard": {
      "description": "Dashboard model",
      "type": "object",
      "properties": {
        "Created": {
          "type": "string",
          "format": "date-time"
        },
        "CreatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "Data": {
          "$ref": "#/definitions/Json"
        },
        "FolderId": {
          "type": "integer",
          "format": "int64"
        },
        "GnetId": {
          "type": "integer",
          "format": "int64"
        },
        "HasAcl": {
          "type": "boolean"
        },
        "Id": {
          "type": "integer",
          "format": "int64"
        },
        "IsFolder": {
          "type": "boolean"
        },
        "OrgId": {
          "type": "integer",
          "format": "int64"
        },
        "PluginId": {
          "type": "string"
        },
        "Slug": {
          "type": "string"
        },
        "Title": {
          "type": "string"
        },
        "Uid": {
          "type": "string"
        },
        "Updated": {
          "type": "string",
          "format": "date-time"
        },
        "UpdatedBy": {
          "type": "integer",
          "format": "int64"
        },
        "Version": {
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DashboardAclInfoDTO": {
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "dashboardId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DashboardId"
        },
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderId"
        },
        "inherited": {
          "type": "boolean",
          "x-go-name": "Inherited"
        },
        "isFolder": {
          "type": "boolean",
          "x-go-name": "IsFolder"
        },
        "permission": {
          "$ref": "#/definitions/PermissionType"
        },
        "permissionName": {
          "type": "string",
          "x-go-name": "PermissionName"
        },
        "role": {
          "$ref": "#/definitions/RoleType"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "team": {
          "type": "string",
          "x-go-name": "Team"
        },
        "teamAvatarUrl": {
          "type": "string",
          "x-go-name": "TeamAvatarUrl"
        },
        "teamEmail": {
          "type": "string",
          "x-go-name": "TeamEmail"
        },
        "teamId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TeamId"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "userAvatarUrl": {
          "type": "string",
          "x-go-name": "UserAvatarUrl"
        },
        "userEmail": {
          "type": "string",
          "x-go-name": "UserEmail"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserId"
        },
        "userLogin": {
          "type": "string",
          "x-go-name": "UserLogin"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DashboardAclUpdateItem": {
      "description": "DashboardAclUpdateItem is same as dtos.DashboardAclUpdateItem but with swagger annotations",
      "type": "object",
      "properties": {
        "permission": {
          "description": "Permission level\nDescription:\n`1` - View\n`2` - Edit\n`4` - Admin",
          "type": "integer",
          "format": "int64",
          "enum": [
            1,
            2,
            4
          ],
          "x-go-name": "Permission"
        },
        "role": {
          "$ref": "#/definitions/RoleType"
        },
        "teamId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TeamID"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserID"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "DashboardFullWithMeta": {
      "type": "object",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "meta": {
          "$ref": "#/definitions/DashboardMeta"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DashboardMeta": {
      "type": "object",
      "properties": {
        "canAdmin": {
          "type": "boolean",
          "x-go-name": "CanAdmin"
        },
        "canEdit": {
          "type": "boolean",
          "x-go-name": "CanEdit"
        },
        "canSave": {
          "type": "boolean",
          "x-go-name": "CanSave"
        },
        "canStar": {
          "type": "boolean",
          "x-go-name": "CanStar"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Expires"
        },
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderId"
        },
        "folderTitle": {
          "type": "string",
          "x-go-name": "FolderTitle"
        },
        "folderUid": {
          "type": "string",
          "x-go-name": "FolderUid"
        },
        "folderUrl": {
          "type": "string",
          "x-go-name": "FolderUrl"
        },
        "hasAcl": {
          "type": "boolean",
          "x-go-name": "HasAcl"
        },
        "isFolder": {
          "type": "boolean",
          "x-go-name": "IsFolder"
        },
        "isHome": {
          "type": "boolean",
          "x-go-name": "IsHome"
        },
        "isSnapshot": {
          "type": "boolean",
          "x-go-name": "IsSnapshot"
        },
        "isStarred": {
          "type": "boolean",
          "x-go-name": "IsStarred"
        },
        "provisioned": {
          "type": "boolean",
          "x-go-name": "Provisioned"
        },
        "provisionedExternalId": {
          "type": "string",
          "x-go-name": "ProvisionedExternalId"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "updatedBy": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DashboardRedirect": {
      "type": "object",
      "properties": {
        "redirectUri": {
          "type": "string",
          "x-go-name": "RedirectUri"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DashboardTagCloudItem": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "term": {
          "type": "string",
          "x-go-name": "Term"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DashboardVersionDTO": {
      "description": "DashboardVersionDTO represents a dashboard version, without the dashboard\nmap.",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dashboardId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DashboardId"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "parentVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ParentVersion"
        },
        "restoredFrom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RestoredFrom"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DashboardVersionMeta": {
      "description": "DashboardVersionMeta extends the dashboard version model with the names\nassociated with the UserIds, overriding the field with the same name from\nthe DashboardVersion model.",
      "type": "object",
      "properties": {
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "dashboardId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DashboardId"
        },
        "data": {
          "$ref": "#/definitions/Json"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "parentVersion": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ParentVersion"
        },
        "restoredFrom": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RestoredFrom"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "DataFrames": {
      "description": "See NewDecodedDataFrames and NewEncodedDataFrames for more information.",
      "type": "object",
      "title": "DataFrames is an interface for retrieving encoded and decoded data frames.",
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataQueryResult": {
      "description": "Deprecated: DataQueryResult should use backend.QueryDataResponse",
      "type": "object",
      "properties": {
        "dataframes": {
          "$ref": "#/definitions/DataFrames"
        },
        "error": {
          "type": "string",
          "x-go-name": "ErrorString"
        },
        "meta": {
          "$ref": "#/definitions/Json"
        },
        "refId": {
          "type": "string",
          "x-go-name": "RefID"
        },
        "series": {
          "$ref": "#/definitions/DataTimeSeriesSlice"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTable"
          },
          "x-go-name": "Tables"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataResponse": {
      "description": "Deprecated: DataResponse -- this structure is deprecated, all new work should use backend.QueryDataResponse",
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "results": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DataQueryResult"
          },
          "x-go-name": "Results"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataRowValues": {
      "type": "array",
      "items": {
        "type": "object"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataSource": {
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/DsAccess"
        },
        "basicAuth": {
          "type": "boolean",
          "x-go-name": "BasicAuth"
        },
        "basicAuthPassword": {
          "type": "string",
          "x-go-name": "BasicAuthPassword"
        },
        "basicAuthUser": {
          "type": "string",
          "x-go-name": "BasicAuthUser"
        },
        "database": {
          "type": "string",
          "x-go-name": "Database"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "jsonData": {
          "$ref": "#/definitions/Json"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OrgId"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "readOnly": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "secureJsonFields": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "x-go-name": "SecureJsonFields"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "typeLogoUrl": {
          "type": "string",
          "x-go-name": "TypeLogoUrl"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "withCredentials": {
          "type": "boolean",
          "x-go-name": "WithCredentials"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DataSourceList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DataSourceListItemDTO"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DataSourceListItemDTO": {
      "type": "object",
      "properties": {
        "access": {
          "$ref": "#/definitions/DsAccess"
        },
        "basicAuth": {
          "type": "boolean",
          "x-go-name": "BasicAuth"
        },
        "database": {
          "type": "string",
          "x-go-name": "Database"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "jsonData": {
          "$ref": "#/definitions/Json"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "orgId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "OrgId"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "readOnly": {
          "type": "boolean",
          "x-go-name": "ReadOnly"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "typeLogoUrl": {
          "type": "string",
          "x-go-name": "TypeLogoUrl"
        },
        "typeName": {
          "type": "string",
          "x-go-name": "TypeName"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "DataTable": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTableColumn"
          },
          "x-go-name": "Columns"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataRowValues"
          },
          "x-go-name": "Rows"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataTableColumn": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "x-go-name": "Text"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataTimePoint": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Float"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataTimeSeries": {
      "description": "DataTimeSeries -- this structure is deprecated, all new work should use DataFrames from the SDK",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "points": {
          "$ref": "#/definitions/DataTimeSeriesPoints"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Tags"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataTimeSeriesPoints": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DataTimePoint"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DataTimeSeriesSlice": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/DataTimeSeries"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "DsAccess": {
      "type": "string",
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "ErrorResponseBody": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "error": {
          "description": "Error An optional detailed description of the actual error. Only included if running in developer mode.",
          "type": "string",
          "x-go-name": "Error"
        },
        "message": {
          "description": "a human readable version of the error",
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "description": "Status An optional status to denote the cause of the error.\n\nFor example, a 412 Precondition Failed error may include additional information of why that error happened.",
          "type": "string",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "Float": {
      "description": "It does not consider zero values to be null.\nIt will decode to null, not zero, if null.",
      "type": "object",
      "title": "Float is a nullable float64.",
      "properties": {
        "Float64": {
          "type": "number",
          "format": "double"
        },
        "Valid": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/components/null"
    },
    "Folder": {
      "type": "object",
      "properties": {
        "canAdmin": {
          "type": "boolean",
          "x-go-name": "CanAdmin"
        },
        "canEdit": {
          "type": "boolean",
          "x-go-name": "CanEdit"
        },
        "canSave": {
          "type": "boolean",
          "x-go-name": "CanSave"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "createdBy": {
          "type": "string",
          "x-go-name": "CreatedBy"
        },
        "hasAcl": {
          "type": "boolean",
          "x-go-name": "HasAcl"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "updatedBy": {
          "type": "string",
          "x-go-name": "UpdatedBy"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "FolderSearchHit": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "GetHomeDashboardResponse": {
      "title": "Get home dashboard response.",
      "allOf": [
        {
          "type": "object",
          "properties": {
            "dashboard": {
              "$ref": "#/definitions/Json"
            },
            "meta": {
              "$ref": "#/definitions/DashboardMeta"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "redirectUri": {
              "type": "string",
              "x-go-name": "RedirectUri"
            }
          }
        }
      ],
      "x-go-name": "GetHomeDashboardResponseBody",
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "Hit": {
      "type": "object",
      "properties": {
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderID"
        },
        "folderTitle": {
          "type": "string",
          "x-go-name": "FolderTitle"
        },
        "folderUid": {
          "type": "string",
          "x-go-name": "FolderUID"
        },
        "folderUrl": {
          "type": "string",
          "x-go-name": "FolderURL"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "isStarred": {
          "type": "boolean",
          "x-go-name": "IsStarred"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "sortMeta": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "SortMeta"
        },
        "sortMetaName": {
          "type": "string",
          "x-go-name": "SortMetaName"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tags"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "$ref": "#/definitions/HitType"
        },
        "uid": {
          "type": "string",
          "x-go-name": "UID"
        },
        "uri": {
          "type": "string",
          "x-go-name": "URI"
        },
        "url": {
          "type": "string",
          "x-go-name": "URL"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/search"
    },
    "HitList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Hit"
      },
      "x-go-package": "github.com/grafana/grafana/pkg/services/search"
    },
    "HitType": {
      "type": "string",
      "x-go-package": "github.com/grafana/grafana/pkg/services/search"
    },
    "ImportDashboardCommand": {
      "type": "object",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderId"
        },
        "folderUid": {
          "type": "string",
          "x-go-name": "FolderUid"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImportDashboardInput"
          },
          "x-go-name": "Inputs"
        },
        "overwrite": {
          "type": "boolean",
          "x-go-name": "Overwrite"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "pluginId": {
          "type": "string",
          "x-go-name": "PluginId"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "ImportDashboardInput": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pluginId": {
          "type": "string",
          "x-go-name": "PluginId"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/plugins"
    },
    "Json": {
      "type": "object",
      "x-go-package": "github.com/grafana/grafana/pkg/components/simplejson"
    },
    "MetricRequest": {
      "description": "MetricRequest same as dtos.MetricRequest but with swagger annotations",
      "type": "object",
      "required": [
        "from",
        "to",
        "queries"
      ],
      "properties": {
        "debug": {
          "type": "boolean",
          "x-go-name": "Debug"
        },
        "from": {
          "description": "From Start time in epoch timestamps in milliseconds or relative using Grafana time units.",
          "type": "string",
          "x-go-name": "From",
          "example": "now-1h"
        },
        "queries": {
          "description": "queries.refId – Specifies an identifier of the query. Is optional and default to “A”.\nqueries.datasourceId – Specifies the data source to be queried. Each query in the request must have an unique datasourceId.\nqueries.maxDataPoints - Species maximum amount of data points that dashboard panel can render. Is optional and default to 100.\nqueries.intervalMs - Specifies the time interval in milliseconds of time series. Is optional and defaults to 1000.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Json"
          },
          "x-go-name": "Queries",
          "example": [
            {
              "datasourceId": 86,
              "format": "table",
              "intervalMs": 86400000,
              "maxDataPoints": 1092,
              "rawSql": "SELECT 1 as valueOne, 2 as valueTwo",
              "refId": "A"
            }
          ]
        },
        "to": {
          "description": "To End time in epoch timestamps in milliseconds or relative using Grafana time units.",
          "type": "string",
          "x-go-name": "To",
          "example": "now"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "NewApiKeyResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ID"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "PermissionType": {
      "type": "integer",
      "format": "int64",
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "RoleType": {
      "type": "string",
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "SaveDashboardCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/Dashboard"
        },
        "UpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "folderId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FolderId"
        },
        "folderUid": {
          "type": "string",
          "x-go-name": "FolderUid"
        },
        "isFolder": {
          "type": "boolean",
          "x-go-name": "IsFolder"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "overwrite": {
          "type": "boolean",
          "x-go-name": "Overwrite"
        },
        "userId": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UserId"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "SuccessResponseBody": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "TrimDashboardCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/Dashboard"
        },
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "meta": {
          "$ref": "#/definitions/Json"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "TrimDashboardFullWithMeta": {
      "type": "object",
      "properties": {
        "dashboard": {
          "$ref": "#/definitions/Json"
        },
        "meta": {
          "$ref": "#/definitions/Json"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/dtos"
    },
    "UpdateDashboardAclCommand": {
      "description": "UpdateDashboardAclCommand is same as dtos.UpdateDashboardAclCommand but with swagger annotations",
      "type": "object",
      "properties": {
        "items": {
          "description": "The permission items to add/update. Items that are omitted from the list will be removed.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardAclUpdateItem"
          },
          "x-go-name": "Items"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/api/docs/definitions"
    },
    "UpdateDataSourceCommand": {
      "description": "Also acts as api DTO",
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/DataSource"
        },
        "access": {
          "$ref": "#/definitions/DsAccess"
        },
        "basicAuth": {
          "type": "boolean",
          "x-go-name": "BasicAuth"
        },
        "basicAuthPassword": {
          "type": "string",
          "x-go-name": "BasicAuthPassword"
        },
        "basicAuthUser": {
          "type": "string",
          "x-go-name": "BasicAuthUser"
        },
        "database": {
          "type": "string",
          "x-go-name": "Database"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "jsonData": {
          "$ref": "#/definitions/Json"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "secureJsonData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "SecureJsonData"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "url": {
          "type": "string",
          "x-go-name": "Url"
        },
        "user": {
          "type": "string",
          "x-go-name": "User"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        },
        "withCredentials": {
          "type": "boolean",
          "x-go-name": "WithCredentials"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    },
    "UpdateFolderCommand": {
      "type": "object",
      "properties": {
        "Result": {
          "$ref": "#/definitions/Folder"
        },
        "overwrite": {
          "type": "boolean",
          "x-go-name": "Overwrite"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "uid": {
          "type": "string",
          "x-go-name": "Uid"
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/grafana/grafana/pkg/models"
    }
  },
  "responses": {
    "badRequestError": {
      "description": "BadRequestError is returned when the request is invalid and it cannot be processed.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "conflictError": {
      "description": "ConflictError",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "createOrUpdateDatasourceResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "name",
          "message",
          "datasource"
        ],
        "properties": {
          "datasource": {
            "$ref": "#/definitions/DataSource"
          },
          "id": {
            "description": "ID Identifier of the new data source.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "example": 65
          },
          "message": {
            "description": "Message Message of the deleted dashboard.",
            "type": "string",
            "x-go-name": "Message",
            "example": "Data source added"
          },
          "name": {
            "description": "Name of the new data source.",
            "type": "string",
            "x-go-name": "Name",
            "example": "My Data source"
          }
        }
      }
    },
    "dashboardDiffResponse": {
      "description": "Calculate dashboard diff response.",
      "schema": {
        "type": "array",
        "items": {
          "type": "integer",
          "format": "uint8"
        }
      }
    },
    "dashboardResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DashboardFullWithMeta"
      }
    },
    "dashboardVersionResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DashboardVersionMeta"
      }
    },
    "dashboardVersionsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DashboardVersionDTO"
        }
      }
    },
    "dashboardsTagsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DashboardTagCloudItem"
        }
      }
    },
    "deleteDashboardResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "title",
          "message"
        ],
        "properties": {
          "id": {
            "description": "ID Identifier of the deleted dashboard.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "example": 65
          },
          "message": {
            "description": "Message Message of the deleted dashboard.",
            "type": "string",
            "x-go-name": "Message",
            "example": "Dashboard My Dashboard deleted"
          },
          "title": {
            "description": "Title Title of the deleted dashboard.",
            "type": "string",
            "x-go-name": "Title",
            "example": "My Dashboard"
          }
        }
      }
    },
    "deleteDatasourceByNameResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "message"
        ],
        "properties": {
          "id": {
            "description": "ID Identifier of the deleted data source.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "example": 65
          },
          "message": {
            "description": "Message Message of the deleted dashboard.",
            "type": "string",
            "x-go-name": "Message",
            "example": "Dashboard My Dashboard deleted"
          }
        }
      }
    },
    "deleteFolderResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "id",
          "title",
          "message"
        ],
        "properties": {
          "id": {
            "description": "ID Identifier of the deleted folder.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "example": 65
          },
          "message": {
            "description": "Message Message of the deleted folder.",
            "type": "string",
            "x-go-name": "Message",
            "example": "Folder My Folder deleted"
          },
          "title": {
            "description": "Title of the deleted folder.",
            "type": "string",
            "x-go-name": "Title",
            "example": "My Folder"
          }
        }
      }
    },
    "dublicateAPIkeyError": {
      "description": "DublicateAPIkeyError is returned when the API key conflicts with another",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "folderResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Folder"
      }
    },
    "forbiddenError": {
      "description": "ForbiddenError is returned if the user/token has insufficient permissions to access the requested resource.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "genericError": {
      "description": "A GenericError is the default error message that is generated.\nFor certain status codes there are more appropriate error structures.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "getAPIkeyResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/ApiKeyDTO"
        }
      }
    },
    "getDashboardPermissionsResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/DashboardAclInfoDTO"
        }
      }
    },
    "getDatasourceIDresponse": {
      "description": "",
      "schema": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID Identifier of the data source.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "example": 65
          }
        }
      }
    },
    "getDatasourceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DataSource"
      }
    },
    "getDatasourcesResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DataSourceList"
      }
    },
    "getFoldersResponse": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/FolderSearchHit"
        }
      }
    },
    "getHomeDashboardResponse": {
      "description": "Home dashboard response.",
      "schema": {
        "$ref": "#/definitions/GetHomeDashboardResponse"
      }
    },
    "importDashboardResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ImportDashboardInput"
      }
    },
    "internalServerError": {
      "description": "InternalServerError is a general error indicating something went wrong internally.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "notFoundError": {
      "description": "NotFoundError is returned when the requested resource was not found.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "okResponse": {
      "description": "An OKResponse is returned if the request was successful.",
      "schema": {
        "$ref": "#/definitions/SuccessResponseBody"
      }
    },
    "postAPIkeyResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/NewApiKeyResult"
      }
    },
    "postDashboardResponse": {
      "description": "Create/update dashboard response.",
      "schema": {
        "type": "object",
        "required": [
          "status",
          "title",
          "version",
          "id",
          "uid",
          "url"
        ],
        "properties": {
          "id": {
            "description": "ID The unique identifier (id) of the created/updated dashboard.",
            "type": "string",
            "x-go-name": "ID",
            "example": "1"
          },
          "status": {
            "description": "Status status of the response.",
            "type": "string",
            "x-go-name": "Status",
            "example": "success"
          },
          "title": {
            "description": "Slug The slug of the dashboard.",
            "type": "string",
            "x-go-name": "Slug",
            "example": "my-dashboard"
          },
          "uid": {
            "description": "UID The unique identifier (uid) of the created/updated dashboard.",
            "type": "string",
            "x-go-name": "UID",
            "example": "nHz3SXiiz"
          },
          "url": {
            "description": "URL The relative URL for accessing the created/updated dashboard.",
            "type": "string",
            "x-go-name": "URL",
            "example": "/d/nHz3SXiiz/my-dashboard"
          },
          "version": {
            "description": "Version The version of the dashboard.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Verion",
            "example": 2
          }
        }
      }
    },
    "preconditionFailedError": {
      "description": "PreconditionFailedError",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "queryDatasourceResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/DataResponse"
      }
    },
    "quotaReachedError": {
      "description": "QuotaReachedError is returned when quota have been reached for this resource.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "searchResponse": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/HitList"
      }
    },
    "searchSortingResponse": {
      "description": "",
      "schema": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "displayName": {
            "type": "string",
            "x-go-name": "DisplayName"
          },
          "meta": {
            "type": "string",
            "x-go-name": "Meta"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        }
      }
    },
    "trimDashboardResponse": {
      "description": "Trimmed dashboard response.",
      "schema": {
        "$ref": "#/definitions/TrimDashboardFullWithMeta"
      }
    },
    "unauthorisedError": {
      "description": "UnauthorizedError is returned when the request is not authenticated.",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    },
    "unprocessableEntityError": {
      "description": "UnprocessableEntityError",
      "schema": {
        "$ref": "#/definitions/ErrorResponseBody"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": []
    },
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "description": "If you are running Grafana Enterprise and have Fine-grained access control enabled, for some endpoints you would need to have relevant permissions. Refer to specific resources to understand what permissions are required.",
      "name": "datasources"
    },
    {
      "description": "Folders are identified by the identifier (id) and the unique identifier (uid).\nThe identifier (id) of a folder is an auto-incrementing numeric value and is only unique per Grafana install.\nThe unique identifier (uid) of a folder can be used for uniquely identify folders between multiple Grafana installs. It’s automatically generated if not provided when creating a folder. The uid allows having consistent URLs for accessing folders and when syncing folders between multiple Grafana installs. This means that changing the title of a folder will not break any bookmarked links to that folder.\nThe uid can have a maximum length of 40 characters.\n\nThe General folder (id=0) is special and is not part of the Folder API which means that you cannot use this API for retrieving information about the General folder.",
      "name": "folders"
    },
    {
      "description": "Permissions with `folderId=-1` are the default permissions for users with the Viewer and Editor roles. Permissions can be set for a user, a team or a role (Viewer or Editor). Permissions cannot be set for Admins - they always have access to everything.",
      "name": "folder_permissions"
    }
  ]
}