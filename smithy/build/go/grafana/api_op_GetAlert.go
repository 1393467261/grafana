// Code generated by smithy-go-codegen DO NOT EDIT.


package grafana

import (
	"context"
	"github.com/aws/smithy-go/middleware"
	"time"
)

// Get an alert.
func (c *Client) GetAlert(ctx context.Context, params *GetAlertInput, optFns ...func(*Options)) (*GetAlertOutput, error) {
	if params == nil { params = &GetAlertInput{} }
	
	result, metadata, err := c.invokeOperation(ctx, "GetAlert", params, optFns, c.addOperationGetAlertMiddlewares)
	if err != nil { return nil, err }
	
	out := result.(*GetAlertOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetAlertInput struct {
	
	// The alert ID.
	//
	// This member is required.
	Id *string
	
	OrgId int64
	
	noSmithyDocumentSerde
}

type GetAlertOutput struct {
	
	// This member is required.
	Created *time.Time
	
	// This member is required.
	DashboardId int64
	
	// This member is required.
	For int64
	
	// This member is required.
	Frequency int64
	
	// This member is required.
	Id *string
	
	// This member is required.
	Message *string
	
	// This member is required.
	Name *string
	
	// This member is required.
	OrgId int64
	
	// This member is required.
	PanelId *string
	
	// This member is required.
	Silenced bool
	
	// This member is required.
	State *string
	
	// This member is required.
	Version int64
	
	Updated *time.Time
	
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
	
	noSmithyDocumentSerde
}

func (c *Client) addOperationGetAlertMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err = addSetLoggerMiddleware(stack, options); err != nil {
	return err
	}
	if err = addOpGetAlertValidationMiddleware(stack); err != nil {
	return err
	}
	return nil
}
