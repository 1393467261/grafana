// Code generated by smithy-go-codegen DO NOT EDIT.


package grafana

import (
	"context"
	"github.com/aws/smithy-go/middleware"
	"github.com/grafana/grafana/smithy/build/go/grafana/types"
)

// Get alert states for a dashboard.
func (c *Client) GetAlertStatesForDashboard(ctx context.Context, params *GetAlertStatesForDashboardInput, optFns ...func(*Options)) (*GetAlertStatesForDashboardOutput, error) {
	if params == nil { params = &GetAlertStatesForDashboardInput{} }
	
	result, metadata, err := c.invokeOperation(ctx, "GetAlertStatesForDashboard", params, optFns, c.addOperationGetAlertStatesForDashboardMiddlewares)
	if err != nil { return nil, err }
	
	out := result.(*GetAlertStatesForDashboardOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type GetAlertStatesForDashboardInput struct {
	
	// The dashboard ID.
	//
	// This member is required.
	DashboardId *string
	
	// Organization ID.
	OrgId int64
	
	noSmithyDocumentSerde
}

type GetAlertStatesForDashboardOutput struct {
	
	// The found alert states.
	//
	// This member is required.
	Items []types.AlertStateInfo
	
	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata
	
	noSmithyDocumentSerde
}

func (c *Client) addOperationGetAlertStatesForDashboardMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err = addSetLoggerMiddleware(stack, options); err != nil {
	return err
	}
	if err = addOpGetAlertStatesForDashboardValidationMiddleware(stack); err != nil {
	return err
	}
	return nil
}
