// Code generated by smithy-go-codegen DO NOT EDIT.


package grafana

import (
	"context"
	"fmt"
	"github.com/aws/smithy-go/middleware"
	smithy "github.com/aws/smithy-go"
)

type validateOpAlertTest struct {
}

func (*validateOpAlertTest) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpAlertTest) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*AlertTestInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpAlertTestInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAlert struct {
}

func (*validateOpGetAlert) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAlert) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAlertInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAlertInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpGetAlertStatesForDashboard struct {
}

func (*validateOpGetAlertStatesForDashboard) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpGetAlertStatesForDashboard) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*GetAlertStatesForDashboardInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpGetAlertStatesForDashboardInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpPauseAlert struct {
}

func (*validateOpPauseAlert) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpPauseAlert) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*PauseAlertInput)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpPauseAlertInput(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

type validateOpQueryMetricsV2 struct {
}

func (*validateOpQueryMetricsV2) ID() string {
	return "OperationInputValidation"
}

func (m *validateOpQueryMetricsV2) HandleInitialize(ctx context.Context, in middleware.InitializeInput, next middleware.InitializeHandler) (
	out middleware.InitializeOutput, metadata middleware.Metadata, err error,
) {
	input, ok := in.Parameters.(*QueryMetricsV2Input)
	if !ok {
		return out, metadata, fmt.Errorf("unknown input parameters type %T", in.Parameters)
	}
	if err := validateOpQueryMetricsV2Input(input); err != nil {
		return out, metadata, err
	}
	return next.HandleInitialize(ctx, in)
}

func addOpAlertTestValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpAlertTest{}, middleware.After)
}

func addOpGetAlertValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAlert{}, middleware.After)
}

func addOpGetAlertStatesForDashboardValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpGetAlertStatesForDashboard{}, middleware.After)
}

func addOpPauseAlertValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpPauseAlert{}, middleware.After)
}

func addOpQueryMetricsV2ValidationMiddleware(stack *middleware.Stack) error {
	return stack.Initialize.Add(&validateOpQueryMetricsV2{}, middleware.After)
}

func validateOpAlertTestInput(v *AlertTestInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "AlertTestInput"}
	if v.Dashboard == nil {
	invalidParams.Add(smithy.NewErrParamRequired("Dashboard"))
	}
	if v.PanelId == nil {
	invalidParams.Add(smithy.NewErrParamRequired("PanelId"))
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateOpGetAlertInput(v *GetAlertInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAlertInput"}
	if v.Id == nil {
	invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateOpGetAlertStatesForDashboardInput(v *GetAlertStatesForDashboardInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "GetAlertStatesForDashboardInput"}
	if v.DashboardId == nil {
	invalidParams.Add(smithy.NewErrParamRequired("DashboardId"))
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateOpPauseAlertInput(v *PauseAlertInput) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "PauseAlertInput"}
	if v.Id == nil {
	invalidParams.Add(smithy.NewErrParamRequired("Id"))
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}

func validateOpQueryMetricsV2Input(v *QueryMetricsV2Input) error {
	if v == nil {
		return nil
	}
	invalidParams := smithy.InvalidParamsError{Context: "QueryMetricsV2Input"}
	if v.From == nil {
	invalidParams.Add(smithy.NewErrParamRequired("From"))
	}
	if v.To == nil {
	invalidParams.Add(smithy.NewErrParamRequired("To"))
	}
	if invalidParams.Len() > 0 {
	return invalidParams
	} else {
	return nil
	}
}
