@startuml

title Running logs volume query in Explore

box "Explore" #white
participant "Explore UI" as UI
participant "app/feature/explore/\nstate/query" as S
endbox

box "Core" #white
participant "app/feature/query/\nstate/runRequest" as S2
endbox

box "Plugin" #white
participant Datasource as DS
endbox

participant Backend as B

-> UI : User changes query
UI -> S : changeQuery(exploreId)
S -> S : updateQuery
S -> DS : getLogsVolumeQuery(query)
S <-- DS : save in ExplorePanelData
UI <- S : ExplorePanelData

...

-> UI : "Run query" button clicked
UI -> S : runQueries(exploreId)
activate S
S -> S2 : runRequest(DataSourceApi, DataQueryRequest)
S2 -> DS : query(options: DataQueryRequest)
DS -> B : POST /query-endpoint/
DS <-- B : JSON
S2 <- DS : DataQueryResponse\n(mainly { data: DataFrame[] })
S <- S2 : panelData: PanelData\n contains { series: DataFrame[]; }
S -> S : decorateData(panelData)
UI <- S : ExplorePanelData
deactivate
...
-> UI : useEffect() after showing logs\nand loading histogram is pending\nor when run on demand
UI -> S : loadLogsVolume(HistogramDataQueryRequest)
activate S
S -> S2 : runRequest(DataSourceApi, HistogramDataQueryRequest)
S2 -> DS : query(options: DataQueryRequest)
DS -> B : POST /query-endpoint/
DS <-- B : JSON
S2 <- DS : DataQueryResponse\n(mainly { data: DataFrame[] })
S <- S2 : panelData: PanelData\n contains { series: DataFrame[]; }
S -> S : ExplorePanelData.logResults.series = PanelData.series
UI <- S : ExplorePanelData
@enduml
